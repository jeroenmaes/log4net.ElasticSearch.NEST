using System.Collections.Specialized;
using log4net.ElasticSearch.Infrastructure;

namespace log4net.ElasticSearch.Models
{
    public class Uri
    {
<<<<<<< HEAD
        readonly string index;
        readonly string port;
        readonly string server;

        readonly string scheme;
        readonly string user;
        readonly string password;

        Uri(string server, string port, string index, string scheme, string user, string password)
        {
            this.server = server;
            this.port = port;
            this.index = index;

            this.scheme = scheme;
            this.user = user;
            this.password = password;
        }

        public static implicit operator System.Uri(Uri uri)
        {
            if (string.IsNullOrWhiteSpace(uri.user) || string.IsNullOrWhiteSpace(uri.password))
            {
                return new System.Uri(string.Format("{0}://{1}:{2}/{3}/logEvent", uri.scheme, uri.server, uri.port, uri.index));    
            }

            return new System.Uri(string.Format("{0}://{1}:{2}@{3}:{4}/{5}/logEvent", uri.scheme, uri.user, uri.password, uri.server, uri.port, uri.index));
=======
        readonly StringDictionary connectionStringParts;

        Uri(StringDictionary connectionStringParts)
        {
            this.connectionStringParts = connectionStringParts;
        }

        public static implicit operator System.Uri(Uri uri)
        {
            return new System.Uri(string.Format("http://{0}:{1}/{2}/logEvent", uri.Server(), uri.Port(), uri.Index()));
>>>>>>> 4baed080517e257326641b1132c8b1b65ed3e77b
        }

        public static Uri For(string connectionString)
        {
<<<<<<< HEAD
            try
            {
                var builder = new DbConnectionStringBuilder
                {
                    ConnectionString = connectionString.Replace("{", "\"").Replace("}", "\"")
                };
=======
            return new Uri(connectionString.ConnectionStringParts());
        }

        string Server()
        {
            return connectionStringParts[Keys.Server];
        }

        string Port()
        {
            return connectionStringParts[Keys.Port];
        }
>>>>>>> 4baed080517e257326641b1132c8b1b65ed3e77b

        string Index()
        {
            var index = connectionStringParts[Keys.Index];

            return IsRollingIndex(connectionStringParts)
                       ? "{0}-{1}".With(index, Clock.Date.ToString("yyyy.MM.dd"))
                       : index;
        }

<<<<<<< HEAD
                if (!string.IsNullOrEmpty(lookup["rolling"]))
                {
                    if (lookup["rolling"] == "true")
                    {
                        index = string.Format("{0}-{1}", index, DateTime.Now.ToString("yyyy.MM.dd"));
                    }
                }

                var scheme = lookup["Scheme"] ?? "http";
                var user = lookup["User"] ?? string.Empty;
                var password = lookup["Pwd"] ?? string.Empty;

                return new Uri(lookup["Server"], lookup["Port"], index, scheme, user, password);
            }
            catch (Exception ex)
            {
                throw new ArgumentException(string.Format("'{0}' is not a valid connection string", connectionString),
                                            "connectionString", ex);
            }
=======
        static bool IsRollingIndex(StringDictionary parts)
        {
            return parts.Contains(Keys.Rolling) && parts[Keys.Rolling].ToBool();
        }

        private static class Keys
        {
            public const string Server = "Server";
            public const string Port = "Port";
            public const string Index = "Index";
            public const string Rolling = "Rolling";
>>>>>>> 4baed080517e257326641b1132c8b1b65ed3e77b
        }
    }
}